####
https://www.iteye.com/blog/jinnianshilongnian-2018398

### 基本功能
Authentication：身份认证/登录，验证用户是不是拥有相应的身份；
Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；
Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；
Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
Web Support：Web支持，可以非常容易的集成到Web环境；
Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；
Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；
Testing：提供测试支持；
Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；
Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。

### 三个核心
Subject：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；
         所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；
SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，
         如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；
Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；
         也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。

### maven依赖
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.6.0</version>
</dependency>

### 常用的过滤器 DefaultFilter
/admins/**=anon                 # 表示该 uri 可以匿名访问
/admins/**=authc                # 表示该 uri 需要认证才能访问
/admins/**=authcBasic           # 表示该 uri 需要 httpBasic 认证
/admins/**=perms[user:add:*]    # 表示该 uri 需要认证用户拥有 user:add:* 权限才能访问
/admins/**=port[8081]           # 表示该 uri 需要使用 8081 端口
/admins/**=rest[user]           # 相当于 /admins/**=perms[user:method]，其中，method 表示 get、post、delete 等
/admins/**=roles[admin]         # 表示该 uri 需要认证用户拥有 admin 角色才能访问
/admins/**=ssl                  # 表示该 uri 需要使用 https 协议
/admins/**=user                 # 表示该 uri 需要认证或通过记住我认证才能访问
/logout=logout                  # 表示注销,可以当作固定配置
authc是认证过，user是登录过，如果开启了rememberMe功能的话，user是可以通过的，而authc通过不了。
故我们用authc来校验一些关键操作，比如购买，我们可以采用user校验即可。而支付的时候，我们需要认证的用户，那就需要authc了。

### 注解
@RequiresRoles
@RequiresPermissions
@RequiresAuthentication
@RequiresUser
@RequiresGuest